@model MailSenderApp.Models.ViewModels.EmailSenderViewModel

@{
    ViewBag.Title = Model.Heading;
}

<h2 class="mb-3">@Model.Heading</h2>

@if (Model.Email.Id != 0)
{
    <button class="btn btn-secondary mb-3" onclick="generatePdf()">
        Generuj PDF
    </button>
    <button class="btn btn-secondary mb-3" onclick="printEmail()">
        Drukuj
    </button>
}

<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm("NewEmail", "Home"))
        {
            @Html.AntiForgeryToken()

            if (Model.Email.Id == 0)
            {
                <p class="alert alert-info mt-4 mb-4">
                    Pola Tytuł, Do i Treść wiadomości są <strong>wymagane</strong>
                </p>
            }

            @Html.HiddenFor(x => x.Email.Id)
            @Html.HiddenFor(x => x.Email.UserId)

            <div class="form-group mt-3">
                @Html.LabelFor(x => x.Email.EmailParams.Id)
                @Html.DropDownListFor(x => x.Email.EmailParams.Id, new SelectList(Model.EmailParameters, "Id", "SenderName"),
                    "--Wybierz konto--", new { @class = "form-control" })
            </div>

            <div class="form-group mt-3">
                @Html.LabelFor(x => x.Email.Title, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(x => x.Email.Title, new { @class = "form-control", autofocus = "autofocus" })
                    @Html.ValidationMessageFor(x => x.Email.Title)
                </div>
            </div>

            <div class="form-group mt-3">
                @Html.LabelFor(x => x.Email.RecipientAddress, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(x => x.Email.RecipientAddress, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Email.RecipientAddress)
                </div>
            </div>

            <div class="form-group mt-3">
                @Html.LabelFor(x => x.Email.CcAddress, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(x => x.Email.CcAddress, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Email.CcAddress)
                </div>
            </div>

            <div class="form-group mt-3">
                @Html.LabelFor(x => x.Email.Message, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextAreaFor(x => x.Email.Message, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Email.Message)
                </div>
            </div>

            <div class="form-group mt-3">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" class="btn btn-primary mt-3 mb-5" value="Wyślij i zapisz" />
                </div>
            </div>
        }
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.0.20/tinymce.min.js"></script>
    <script type="text/javascript">
        tinymce.init({
            selector: 'textarea',
            width: 600,
            height: 300
        });
    </script>

    <script type="text/javascript">

        function generatePdf() {

            $.ajax({
                type: 'POST',
                url: "@Url.Action("EmailToPdf", "Print")",
                data: {
                    id: '@Model.Email.Id'
                },
                success: function (data) {
                    window.location = '@Url.Action("DownloadEmailPdf", "Print")' + '?fileGuid=' + data.FileGuid + '&fileName=' + data.FileName;
                },
                error: function (data) {
                    alert(data.Message);
                },
                dataType: 'json',
                cache: false
            });

        }

        function printEmail() {

            var windowUrl = '@Url.Action("PrintEmail", "Print")' + '?id=' + '@Model.Email.Id';
            var printWindow = window.open(windowUrl, '', 'top = 100, left = 200, width = 500, height = 500');
            printWindow.print();
        }


        $(document).ready(function () {

            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }

            $.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };

        });
    </script>
}